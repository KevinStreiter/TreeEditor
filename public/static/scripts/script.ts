import { Bubble } from "./bubble"import * as d3 from "./modules/d3.js"window.onload = () => {    let g;    let rect;    let circleTop;    let circleBottom;    let circleLeft;    let circleRight;    let line;    let deltaX;    let deltaY;    let svg = d3.select("#graph")        .on("mousedown", mousedown)        .on("mouseup", mouseup);    let drag = d3.drag()        .on("start", dragstart)        .on("drag", dragmove);    function mousedown() {        let event = d3.mouse(this);        g = svg.append("g")            .call(drag);        rect = g.append("rect")            .attr("x", event[0])            .attr("y", event[1])            .attr("rx", 20)            .attr("ry", 20)            .attr('height', 0)            .attr('width', 0)            .attr("stroke", "#7b9eb4")            .attr("stroke-width", 4)            .attr("fill",  "#aaa9ad")            .on("mouseover", function() {                d3.select(this)                    .style("cursor", "pointer")            })            .on("mouseout", function() {                d3.select(this)                    .style("cursor", "default")            })            .call(drag);        circleTop = g.append("circle")            .attr("cx", (+rect.attr("x") + (+rect.attr("width")/ 2)))            .attr("cy", +rect.attr("y"))            .attr("r", 5)            .attr("class", "circleTop")            .attr("fill", "grey");        circleBottom = g.append("circle")            .attr("cx", (+rect.attr("x") + (+rect.attr("width")/ 2)))            .attr("cy", (+rect.attr("y") + +rect.attr("height")))            .attr("r", 5)            .attr("class", "circleBottom")            .attr("fill", "grey");        circleLeft = g.append("circle")            .attr("cx", +rect.attr("x"))            .attr("cy", (+rect.attr("y") + (+rect.attr("height")/ 2)))            .attr("r", 5)            .attr("class", "circleLeft")            .attr("fill", "grey");        circleRight = g.append("circle")            .attr("cx", (+rect.attr("x") + +rect.attr("width")))            .attr("cy", (+rect.attr("y") + (+rect.attr("height")/ 2)))            .attr("r", 5)            .attr("class", "circleRight")            .attr("fill", "grey");        d3.selectAll("circle")            .raise()            .on('mouseover', function(){                d3.select(this)                    .attr("r", 10);            })            .on('mouseout', function(){                d3.select(this)                    .attr("r", 5);            })            .on("click", drawLine)            .call(drag);        svg.on("mousemove", mousemove);    }    function mousemove() {        let event = d3.mouse(this);        rect.attr("width", Math.max(0,event[0] - +rect.attr("x")))            .attr("height",  Math.max(0,event[1] - +rect.attr("y")));        circleTop            .attr("cx", (+rect.attr("x") + (+rect.attr("width")/ 2)))            .attr("cy", +rect.attr("y"));        circleBottom            .attr("cx", (+rect.attr("x") + (+rect.attr("width")/ 2)))            .attr("cy", (+rect.attr("y") + +rect.attr("height")));        circleLeft            .attr("cx", +rect.attr("x"))            .attr("cy", (+rect.attr("y") + (+rect.attr("height")/ 2)));        circleRight            .attr("cx", (+rect.attr("x") + +rect.attr("width")))            .attr("cy", (+rect.attr("y") + (+rect.attr("height")/ 2)));    }    function dragstart() {        let current = d3.select(this);        let tagName = current.node().tagName;        if (tagName === "rect") {            deltaX = current.attr("x") - d3.event.x;            deltaY = current.attr("y") - d3.event.y;        }    }    function dragmove() {        let current = d3.select(this);        let tagName = current.node().tagName;        if (tagName === "rect") {            current                .attr("x", d3.event.x + deltaX)                .attr("y", d3.event.y + deltaY);            let parent = d3.select(this.parentNode);            parent.select("circle.circleTop")                .attr("cx", (d3.event.x + deltaX) + (+d3.select(this).attr("width")/ 2))                .attr("cy", (d3.event.y + deltaY));            parent.select("circle.circleBottom")                .attr("cx", (d3.event.x + deltaX) + (+d3.select(this).attr("width")/ 2))                .attr("cy", (d3.event.y + deltaY) + +d3.select(this).attr("height"));            parent.select("circle.circleLeft")                .attr("cx", (d3.event.x + deltaX))                .attr("cy", (d3.event.y + deltaY) + (+d3.select(this).attr("height")/ 2));            parent.select("circle.circleRight")                .attr("cx", (d3.event.x + deltaX) + +d3.select(this).attr("width"))                .attr("cy", (d3.event.y + deltaY) + (+d3.select(this).attr("height")/ 2));        }     }    function mouseup() {        svg.on("mousemove", null);    }    function drawLine() {        let current = d3.select(this);        let cx = current.attr("cx");        let cy = current.attr("cy");        line = svg.append("line");        line.attr("x1", cx)            .attr("y1", cy)            .attr("x2", cx)            .attr("y2", cy)            .attr("stroke","grey")            .attr("stroke-width", 3);        svg.on("mousemove", moveLine);    }    function removeLine() {        line.remove();        resetListeners();    }    function resetListeners() {        svg            .on("mousemove", null)            .on("mousedown", mousedown)            .on("mouseup", mouseup);        d3.selectAll("circle")                 .raise()                 .on("click", drawLine);    }    function moveLine() {        let event = d3.mouse(this);        line.attr("x2", event[0] - 5)            .attr("y2", event[1] - 5);        svg            .on("mousedown", null)            .on("mouseup", null)            .on("dblclick", removeLine)        d3.selectAll("circle")            .raise()            .on("click", combineRect)    }    function combineRect() {        let current = d3.select(this);        line            .attr("x2", current.attr("cx"))            .attr("y2", current.attr("cy"))        resetListeners();    }};